% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LS_empirical_pvalue.R
\name{LS.empirical}
\alias{LS.empirical}
\title{Fixed effect meta-analysis for correlated test statistics}
\usage{
LS.empirical(
  beta,
  stders,
  cor = diag(1, length(beta)),
  nu = rep(Inf, length(beta)),
  n.mc.samples = 1e+05
)
}
\arguments{
\item{beta}{regression coefficients from each analysis}

\item{stders}{standard errors corresponding to betas}

\item{cor}{correlation matrix between of test statistics.  Default considers uncorrelated test statistics}

\item{nu}{array of degrees of freedom values, one for each coefficient}

\item{n.mc.samples}{number of Monte Carlo samples}
}
\description{
Fixed effect meta-analysis for correlated test statistics using the Lin-Sullivan method using Monte Carlo draws from the null distribution to compute the p-value.
}
\details{
The theorical null for the Lin-Sullivan statistic for fixed effects meta-analysis is chisq when the regression coefficients being tested are normally distributed. This works  asymptotically when the regression coefficients are estimated from a sufficiently large sample.  But when the coefficients are estimated from a small sample, they have a Student-t null distrubtion that is not well approximated by a normal.  In this case, no cumulative distribution function exists in closed form.  Here we simulate coefficients from the student-t under the null given the covariance and degrees of freedom, compute the Lin-Sullivan statistic and then fit a gamma distribution to these null samples.  The p-value for the observed Lin-Sullivan statistic is then computed using this gamma approximation.
}
\examples{
library(clusterGeneration)
library(mvtnorm)

p = 6
C = cov2cor(genPositiveDefMat(p)$Sigma)
stders = rep(2, p)
V <- diag(stders) \%*\% C \%*\% diag(stders)
beta = t(rmvnorm(1, rep(5, p), V))

# Run fixed effects meta-analysis, 
# and get theoretical p-value  
res = LS( beta, stders, C)
res

# Get p-value from gamma fit to Monte Carlo samples 
# from null distrubtion
# This matches the theoretical p-value when betas 
# are drawn from a normal distribution
LS.empirical(beta, stders, C)

# Compute empirical p-value assuming 
# varying and finite degrees of freedom
nu = seq(5, p+4)
LS.empirical(beta, stders, C, nu)
}
\seealso{
\code{LS()}
}
