[{"path":"http://gabrielhoffman.github.io/remaCor/articles/remaCor.html","id":"fixed-effects-meta-analysis","dir":"Articles","previous_headings":"","what":"Fixed effects meta-analysis","title":"Random effects meta-analysis for correlated test statistics","text":"LS() implements fixed effect meta-analysis correlated test statistics using method Lin Sullivan (2009). default, correlation set identity matrix independent test statistics.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/articles/remaCor.html","id":"random-effects-meta-analysis","dir":"Articles","previous_headings":"","what":"Random effects meta-analysis","title":"Random effects meta-analysis for correlated test statistics","text":"RE2C() implements random effect meta-analysis correlated test statistics jointly tests deviation mean zero well effect size heterogenity. method uses RE2 method Han Eskin (2011), RE2 correlated test statistics Han et al. (2016). default, correlation set identity matrix independent test statistics. (addition, function computes two step RE2C method Lee, Eskin, Han (2017) test heterogenity effect size applying fixed effect test.) stat1: statistic testing effect mean stat2: statistic testing effect heterogeneity RE2Cp: RE2 p-value accounting correlelation tests. (p-value appropriate questions) RE2Cp.twoStep: two step RE2C test fixed effect test. evaluated twoStep==TRUE. (typically used) QE: test statistic test (residual) heterogeneity QEp: p-value test (residual) heterogeneity Isq: ^2 statistic QE, QEp Isq evaluted correlation diagonal","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/articles/remaCor.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Random effects meta-analysis for correlated test statistics","text":"","code":"library(remaCor) library(metafor) library(mvtnorm) library(clusterGeneration )  # sample size n = 30  # number of response variables m = 2  # Error covariance Sigma = genPositiveDefMat(m)$Sigma  # regression parameters beta = matrix(0, 1, m)  # covariates X = matrix(rnorm(n), ncol=1)  # Simulate response variables Y = X %*% beta + rmvnorm(n, sigma = Sigma)  # Multivariate regression fit = lm(Y ~ X)  # Correlation between residuals C = cor(residuals(fit))  # Extract effect sizes and standard errors from model fit df = lapply(coef(summary(fit)), function(a)    data.frame(beta = a[\"X\", 1], se = a[\"X\", 2])) df = do.call(rbind, df)  # Standard fixed effects meta-analysis # of independent effects with metafor pacakge rma( df$beta, sei=df$se, method=\"FE\") ##  ## Fixed-Effects Model (k = 2) ##  ## I^2 (total heterogeneity / total variability):   0.00% ## H^2 (total variability / sampling variability):  0.02 ##  ## Test for Heterogeneity: ## Q(df = 1) = 0.0171, p-val = 0.8958 ##  ## Model Results: ##  ## estimate      se     zval    pval    ci.lb   ci.ub     ##  -0.0114  0.3080  -0.0370  0.9705  -0.6151  0.5923     ##  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # Standard random effects meta-analysis # of independent effects with metafor pacakge rma( df$beta, sei=df$se, method=\"REML\") ##  ## Random-Effects Model (k = 2; tau^2 estimator: REML) ##  ## tau^2 (estimated amount of total heterogeneity): 0 (SE = 0.2714) ## tau (square root of estimated tau^2 value):      0 ## I^2 (total heterogeneity / total variability):   0.00% ## H^2 (total variability / sampling variability):  1.00 ##  ## Test for Heterogeneity: ## Q(df = 1) = 0.0171, p-val = 0.8958 ##  ## Model Results: ##  ## estimate      se     zval    pval    ci.lb   ci.ub     ##  -0.0114  0.3080  -0.0370  0.9705  -0.6151  0.5923     ##  ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 # Run fixed effects meta-analysis, assume identity correlation   # Use Lin-Sullivan method LS( df$beta, df$se) ##          beta        se         p ## 1 -0.01140088 0.3080247 0.9704747 # Run fixed effects meta-analysis, accounting for correlation   # Use Lin-Sullivan method LS( df$beta, df$se, C) ##          beta        se         p ## 1 -0.01169888 0.3178948 0.9706436 # Run random effects meta-analysis, assume identity correlation   RE2C( df$beta, df$se) ##         stat1 stat2     RE2Cp RE2Cp.twoStep         QE       QEp Isq ## 1 0.001369952     0 0.9750027            NA 0.01714325 0.8958289   0 # Run random effects meta-analysis, accounting for correlation  RE2C( df$beta, df$se, C) ##         stat1 stat2     RE2Cp RE2Cp.twoStep QE QEp Isq ## 1 0.001354322     0 0.9755282            NA NA  NA  NA ##         stat1 stat2     RE2Cp RE2Cp.twoStep QE QEp Isq ## 1 0.001354322     0 0.9755282            NA NA  NA  NA"},{"path":"http://gabrielhoffman.github.io/remaCor/articles/remaCor.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Random effects meta-analysis for correlated test statistics","text":"","code":"sessionInfo() ## R version 4.3.0 (2023-04-21) ## Platform: x86_64-apple-darwin22.4.0 (64-bit) ## Running under: macOS Ventura 13.4 ##  ## Matrix products: default ## BLAS:   /Users/gabrielhoffman/prog/R-4.3.0/lib/libRblas.dylib  ## LAPACK: /usr/local/Cellar/r/4.3.0_1/lib/R/lib/libRlapack.dylib;  LAPACK version 3.11.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] clusterGeneration_1.3.7 MASS_7.3-60             mvtnorm_1.2-1           ## [4] metafor_4.2-0           numDeriv_2016.8-1.1     metadat_1.2-0           ## [7] Matrix_1.5-4.1          remaCor_0.0.15          ggplot2_3.4.2           ##  ## loaded via a namespace (and not attached): ##  [1] sass_0.4.6        utf8_1.2.3        generics_0.1.3    EnvStats_2.7.0    ##  [5] lattice_0.21-8    stringi_1.7.12    digest_0.6.31     magrittr_2.0.3    ##  [9] evaluate_0.21     grid_4.3.0        fastmap_1.1.1     rprojroot_2.0.3   ## [13] plyr_1.8.8        jsonlite_1.8.5    purrr_1.0.1       fansi_1.0.4       ## [17] scales_1.2.1      codetools_0.2-19  textshaping_0.3.6 jquerylib_0.1.4   ## [21] Rdpack_2.4        cli_3.6.1         rlang_1.1.1       rbibutils_2.2.13  ## [25] munsell_0.5.0     withr_2.5.0       cachem_1.0.8      yaml_2.3.7        ## [29] tools_4.3.0       reshape2_1.4.4    memoise_2.0.1     dplyr_1.1.2       ## [33] colorspace_2.1-0  mathjaxr_1.6-0    vctrs_0.6.2       R6_2.5.1          ## [37] lifecycle_1.0.3   stringr_1.5.0     fs_1.6.2          ragg_1.2.5        ## [41] pkgconfig_2.0.3   desc_1.4.2        pkgdown_2.0.7     pillar_1.9.0      ## [45] bslib_0.4.2       gtable_0.3.3      glue_1.6.2        Rcpp_1.0.10       ## [49] systemfonts_1.0.4 xfun_0.39         tibble_3.2.1      tidyselect_1.2.0  ## [53] knitr_1.43        nlme_3.1-162      htmltools_0.5.5   rmarkdown_2.22    ## [57] compiler_4.3.0"},{"path":[]},{"path":"http://gabrielhoffman.github.io/remaCor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gabriel Hoffman. Author, maintainer.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lee, C. H., Eskin, E., & Han, B. (2017). Increasing power meta-analysis genome-wide association studies detect heterogeneous effects. Bioinformatics, 33(14), i379-i388. doi:10.1093/bioinformatics/btx242 Han, B. et al. (2016) general framework meta-analyzing dependent studies overlapping subjects association mapping. Hum. Mol. Genet., 25, 1857-1866. Han, B. Eskin, E. (2011) Random-effects model aimed discovering associations meta-analysis genome-wide association studies. . J. Hum. Genet., 88, 586-598. doi:10.1016/j.ajhg.2011.04.014","code":"@Article{,   title = {Increasing the power of meta-analysis of genome-wide association studies to detect heterogeneous effects},   author = {CH Lee and Eleazar Eskin and Buhm Han},   year = {2017},   journal = {Bioinformatics},   doi = {10.1093/bioinformatics/btx242},   volume = {33},   issue = {14},   pages = {i379--i388}, } @Article{,   title = {A general framework for meta-analyzing dependent studies with overlapping subjects in association mapping},   author = {Buhm Han and et al.},   year = {2016},   journal = {Hum. Mol. Genet.},   doi = {10.1093/hmg/ddw049},   volume = {25},   issue = {9},   pages = {1857-1866}, } @Article{,   title = {Random-effects model aimed at discovering associations in meta-analysis of genome-wide association studies},   author = {Buhm Han and Eleazar Eskin},   year = {2011},   journal = {Am. J. Hum. Genet.},   doi = {10.1016/j.ajhg.2011.04.014},   volume = {88},   issue = {5},   pages = {586--598}, }"},{"path":"http://gabrielhoffman.github.io/remaCor/index.html","id":"random-effects-meta-analysis-for-correlated-test-statistics","dir":"","previous_headings":"","what":"Random Effects Meta-Analysis for Correlated Test Statistics","title":"Random Effects Meta-Analysis for Correlated Test Statistics","text":"Meta-analysis widely used summarize estimated effects sizes across multiple statistical tests. Standard fixed random effect meta-analysis methods assume estimated effect sizes statistically independent. relax assumption enable meta-analysis correlation matrix effect size estimates known. Fixed effect meta-analysis uses method Lin Sullivan (2009), random effects meta-analysis uses method Han, et al.Â 2016.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Random Effects Meta-Analysis for Correlated Test Statistics","text":"","code":"# Run fixed effects meta-analysis, accounting for correlation  LS( beta, stders, Sigma)  # Run random effects meta-analysis, accounting for correlation  RE2C( beta, stders, Sigma)"},{"path":"http://gabrielhoffman.github.io/remaCor/index.html","id":"install-from-github","dir":"","previous_headings":"","what":"Install from GitHub","title":"Random Effects Meta-Analysis for Correlated Test Statistics","text":"","code":"devtools::install_github(\"DiseaseNeurogenomics/remaCor\")"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.empirical.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed effect meta-analysis for correlated test statistics â LS.empirical","title":"Fixed effect meta-analysis for correlated test statistics â LS.empirical","text":"Fixed effect meta-analysis correlated test statistics using Lin-Sullivan method using Monte Carlo draws null distribution compute p-value.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.empirical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed effect meta-analysis for correlated test statistics â LS.empirical","text":"","code":"LS.empirical(   beta,   stders,   cor = diag(1, length(beta)),   nu,   n.mc.samples = 10000,   seed = 1,   useGamma = TRUE )"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.empirical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed effect meta-analysis for correlated test statistics â LS.empirical","text":"beta regression coefficients analysis stders standard errors corresponding betas cor correlation matrix test statistics.  Default considers uncorrelated test statistics nu degrees freedom n.mc.samples number Monte Carlo samples seed random seed results reproducable useGamma TRUE, use gamma approximation fit empirical distribution test statistics compute p-value.  FALSE, report p-value (1 + sum(obs > stat)) / (length(stat)+1).  Using TRUE allows computation small p-values fewer Monte Carlo samples.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.empirical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fixed effect meta-analysis for correlated test statistics â LS.empirical","text":"theoretical null Lin-Sullivan statistic fixed effects meta-analysis chisq regression coefficients estimated large sample size. finite sample size, null distribution well characterized. case, aware closed cumulative distribution function.  Instead draw covariance matrices Wishart distribution, sample coefficients multivariate normal covariance, compute Lin-Sullivan statistic.  gamma distribution fit  draws null distribution p-value computed cumulative distribution function gamma.","code":""},{"path":[]},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.empirical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed effect meta-analysis for correlated test statistics â LS.empirical","text":"","code":"library(clusterGeneration) library(mvtnorm)  # sample size n = 30  # number of response variables m = 6  # Error covariance Sigma = genPositiveDefMat(m)$Sigma  # regression parameters beta = matrix(.6, 1, m)  # covariates X = matrix(rnorm(n), ncol=1)  # Simulate response variables Y = X %*% beta + rmvnorm(n, sigma = Sigma)  # Multivariate regression fit = lm(Y ~ X)  # Correlation between residuals C = cor(residuals(fit))  # Extract effect sizes and standard errors from model fit df = lapply(coef(summary(fit)), function(a)    data.frame(beta = a[\"X\", 1], se = a[\"X\", 2])) df = do.call(rbind, df)  # Meta-analysis assuming infinite sample size # but the p-value is anti-conservative LS(df$beta, df$se, C) #>        beta         se            p #> 1 0.5974489 0.08610924 3.969383e-12  # Meta-analysis explicitly modeling the finite sample size # Gives properly calibrated p-values # nu is the residual degrees of freedom from the model fit LS.empirical(df$beta, df$se, C, nu=n-2) #>        beta         se            p #> 1 0.5974489 0.08610924 9.033952e-08"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.html","id":null,"dir":"Reference","previous_headings":"","what":"Fixed effect meta-analysis for correlated test statistics â LS","title":"Fixed effect meta-analysis for correlated test statistics â LS","text":"Fixed effect meta-analysis correlated test statistics using Lin-Sullivan method.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fixed effect meta-analysis for correlated test statistics â LS","text":"","code":"LS(beta, stders, cor = diag(1, length(beta)))"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fixed effect meta-analysis for correlated test statistics â LS","text":"beta regression coefficients analysis stders standard errors corresponding betas cor correlation matrix test statistics.  Default considers uncorrelated test statistics","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fixed effect meta-analysis for correlated test statistics â LS","text":"beta: effect size se: effect size standard error p: p-value","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fixed effect meta-analysis for correlated test statistics â LS","text":"Perform fixed effect meta-analysis correlated test statistics using method Lin Sullivan (2009).  default, correlation set identity matrix independent test statistics. method requires correlation matrix symmatric positive definite (SPD).  condition satisfied, results NA.  matrix SPD, likely issue generated. However, evaluating correlation observations pairwise complete can give correlation matricies SPD.  case, consider running Matrix::nearPD( x, corr=TRUE) produce nearest SPD matrix input.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fixed effect meta-analysis for correlated test statistics â LS","text":"Lin D, Sullivan PF (2009). âMeta-analysis genome-wide association studies overlapping subjects.â American Journal Human Genetics, 85(6), 862â872. https://doi.org/10.1016/j.ajhg.2009.11.001.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/LS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fixed effect meta-analysis for correlated test statistics â LS","text":"","code":"library(clusterGeneration) #> Loading required package: MASS library(mvtnorm)  # sample size n = 30  # number of response variables m = 6  # Error covariance Sigma = genPositiveDefMat(m)$Sigma  # regression parameters beta = matrix(.6, 1, m)  # covariates X = matrix(rnorm(n), ncol=1)  # Simulate response variables Y = X %*% beta + rmvnorm(n, sigma = Sigma)  # Multivariate regression fit = lm(Y ~ X)  # Correlation between residuals C = cor(residuals(fit))  # Extract effect sizes and standard errors from model fit df = lapply(coef(summary(fit)), function(a)   data.frame(beta = a[\"X\", 1], se = a[\"X\", 2])) df = do.call(rbind, df)  # Run fixed effects meta-analysis,  # assume identity correlation   LS( df$beta, df$se) #>        beta        se            p #> 1 0.6854324 0.1459224 2.637027e-06   # Run fixed effects meta-analysis,  # account for correlation  LS( df$beta, df$se, C) #>        beta        se            p #> 1 0.7280211 0.1596967 5.145312e-06"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/RE2C.html","id":null,"dir":"Reference","previous_headings":"","what":"Random effect meta-analysis for correlated test statistics â RE2C","title":"Random effect meta-analysis for correlated test statistics â RE2C","text":"Random effect meta-analysis correlated test statistics using RE2C","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/RE2C.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random effect meta-analysis for correlated test statistics â RE2C","text":"","code":"RE2C(beta, stders, cor = diag(1, length(beta)), twoStep = FALSE)"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/RE2C.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random effect meta-analysis for correlated test statistics â RE2C","text":"beta regression coefficients analysis stders standard errors corresponding betas cor correlation matrix test statistics.  Default considers uncorrelated test statistics twoStep Apply two step version RE2C designed applied fixed effect model.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/RE2C.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random effect meta-analysis for correlated test statistics â RE2C","text":"stat1: statistic testing effect mean stat2: statistic testing effect heterogeneity RE2Cp: RE2 p-value accounting correlelation tests RE2Cp.twoStep: two step RE2C test fixed effect test.  evaluated twoStep==TRUE QE: test statistic test (residual) heterogeneity QEp: p-value test (residual) heterogeneity Isq: ^2 statistic","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/RE2C.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Random effect meta-analysis for correlated test statistics â RE2C","text":"Perform random effect meta-analysis correlated test statistics using RE2 method Han Eskin (2011) , RE2 correlated test statistics Han et al. (2016) .  Also uses RE2C method Lee et al. (2017)  test heterogenity effect size. default, correlation set identity matrix independent test statistics. method requires correlation matrix symmatric positive definite (SPD).  condition satisfied, results NA.  matrix SPD, likely issue generated. computing Q, QEp, Isq, effective number independent studies determined sum(solve(cor)) (Liu Liang 1997) .  correlation diagonal, studies independent value simply number studies.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/RE2C.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random effect meta-analysis for correlated test statistics â RE2C","text":"Han B, Duong D, Sul JH, de Bakker PI, Eskin E, Raychaudhuri S (2016). âgeneral framework meta-analyzing dependent studies overlapping subjects association mapping.â Human Molecular Genetics, 25(9), 1857â1866. https://doi.org/10.1093/hmg/ddw049. Han B, Eskin E (2011). âRandom-effects model aimed discovering associations meta-analysis genome-wide association studies.â American Journal Human Genetics, 88(5), 586â598. https://doi.org/10.1016/j.ajhg.2011.04.014. Lee CH, Eskin E, Han B (2017). âIncreasing power meta-analysis genome-wide association studies detect heterogeneous effects.â Bioinformatics, 33(14), i379âi388. https://doi.org/10.1093/bioinformatics/btx242. Liu G, Liang K (1997). âSample size calculations studies correlated observations.â Biometrics, 937â947. https://doi.org/10.2307/2533554.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/RE2C.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random effect meta-analysis for correlated test statistics â RE2C","text":"","code":"library(clusterGeneration) library(mvtnorm)  # sample size n = 30  # number of response variables m = 6  # Error covariance Sigma = genPositiveDefMat(m)$Sigma  # regression parameters beta = matrix(.6, 1, m)  # covariates X = matrix(rnorm(n), ncol=1)  # Simulate response variables Y = X %*% beta + rmvnorm(n, sigma = Sigma)  # Multivariate regression fit = lm(Y ~ X)  # Correlation between residuals C = cor(residuals(fit))  # Extract effect sizes and standard errors from model fit df = lapply(coef(summary(fit)), function(a)   data.frame(beta = a[\"X\", 1], se = a[\"X\", 2])) df = do.call(rbind, df)  # Run fixed effects meta-analysis,  # assume identity correlation   LS( df$beta, df$se) #>        beta       se           p #> 1 0.4004915 0.147962 0.006795195  # Run random effects meta-analysis, # assume identity correlation   RE2C( df$beta, df$se) #>      stat1 stat2      RE2Cp RE2Cp.twoStep       QE       QEp Isq #> 1 7.326322     0 0.01255951            NA 3.585407 0.6105057   0  # Run fixed effects meta-analysis,  # account for correlation  LS( df$beta, df$se, C) #>        beta        se          p #> 1 0.4657671 0.1684852 0.00570209  # Run random effects meta-analysis, # account for correlation  RE2C( df$beta, df$se, C) #>      stat1     stat2       RE2Cp RE2Cp.twoStep       QE       QEp      Isq #> 1 7.642119 0.3393766 0.009417392            NA 3.780033 0.3747031 4.994907"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/hotelling.html","id":null,"dir":"Reference","previous_headings":"","what":"Hottelling T^2 test for multivariate regression â hotelling","title":"Hottelling T^2 test for multivariate regression â hotelling","text":"Hottelling T^2 test compares estimated regression coefficients specified values null.  tests global hypothesis specified coefficients.  uses F-distribution null test statistic exact finite sample size.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/hotelling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hottelling T^2 test for multivariate regression â hotelling","text":"","code":"hotelling(beta, Sigma, n, mu_null = rep(0, length(beta)))"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/hotelling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hottelling T^2 test for multivariate regression â hotelling","text":"beta regressioin coefficients Sigma covariance matrix regression coefficients n sample size used estimation mu_null values regression coefficients null hypothesis.  Defaults zeros","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/hotelling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hottelling T^2 test for multivariate regression â hotelling","text":"Hotelling T2 test defined n - p < 1.  Returns data.frame stat = pvalue = NA.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/hotelling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hottelling T^2 test for multivariate regression â hotelling","text":"","code":"library(clusterGeneration) library(mvtnorm)  # sample size n = 30  # number of response variables m = 2  # Error covariance Sigma = genPositiveDefMat(m)$Sigma  # regression parameters beta = matrix(.6, 1, m)  # covariates X = matrix(rnorm(n), ncol=1)  # Simulate response variables Y = X %*% beta + rmvnorm(n, sigma = Sigma)  # Multivariate regression fit = lm(Y ~ X)  # extract coefficients and covariance # corresponding to the x variable beta = coef(fit)['X',] S = vcov(fit)[c(2,4), c(2,4)]  # perform Hotelling test hotelling(beta, S, n) #>    n p      tsq     stat    p.value #> 1 30 2 6.502292 3.139038 0.05888199"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/pkg.env.html","id":null,"dir":"Reference","previous_headings":"","what":"Local environment â pkg.env","title":"Local environment â pkg.env","text":"Local environment","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/pkg.env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local environment â pkg.env","text":"","code":"pkg.env"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/pkg.env.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Local environment â pkg.env","text":"object class environment length 0.","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotCor.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation plot â plotCor","title":"Correlation plot â plotCor","text":"Correlation plot","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotCor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation plot â plotCor","text":"","code":"plotCor(cor)"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotCor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation plot â plotCor","text":"cor correlation matrix test statistics.  Default considers uncorrelated test statistics","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotCor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correlation plot â plotCor","text":"Plot correlation matrix","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotCor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation plot â plotCor","text":"","code":"# Generate effects library(mvtnorm) library(clusterGeneration )  n = 4 Sigma = cov2cor(genPositiveDefMat(n)$Sigma) beta = t(rmvnorm(1, rep(0, n), Sigma)) stders = rep(.1, n)    # set names rownames(Sigma) = colnames(Sigma) = LETTERS[1:n] rownames(beta) = names(stders) = LETTERS[1:n]  # Run random effects meta-analysis, # account for correlation  RE2C( beta, stders, Sigma) #>         stat1    stat2        RE2Cp RE2Cp.twoStep       QE          QEp #> 1 0.000629065 148.7278 1.725611e-33            NA 158.4847 5.344307e-34 #>        Isq #> 1 98.01431  # Make plot plotCor( Sigma )"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Forest plot of coefficients â plotForest","title":"Forest plot of coefficients â plotForest","text":"Forest plot coefficients","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forest plot of coefficients â plotForest","text":"","code":"plotForest(beta, stders)"},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forest plot of coefficients â plotForest","text":"beta regression coefficients analysis stders standard errors corresponding betas","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forest plot of coefficients â plotForest","text":"Forest plot effect sizes standard errors","code":""},{"path":"http://gabrielhoffman.github.io/remaCor/reference/plotForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forest plot of coefficients â plotForest","text":"","code":"# Generate effects library(mvtnorm) library(clusterGeneration )  n = 4 Sigma = cov2cor(genPositiveDefMat(n)$Sigma) beta = t(rmvnorm(1, rep(0, n), Sigma)) stders = rep(.1, n)    # set names rownames(Sigma) = colnames(Sigma) = LETTERS[1:n] rownames(beta) = names(stders) = LETTERS[1:n]  # Run random effects meta-analysis, # account for correlation  RE2C( beta, stders, Sigma) #>      stat1    stat2       RE2Cp RE2Cp.twoStep       QE          QEp      Isq #> 1 48.03552 196.3024 2.75259e-54            NA 219.7931 7.618391e-48 98.83897  # Make plot plotForest( beta, stders )"}]
